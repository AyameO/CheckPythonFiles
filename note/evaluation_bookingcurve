# pandasのインポート
import pandas as pd

# データの読み込み
df_201903 = pd.read_csv("booking_data_201903.csv", parse_dates=["予約受付日","宿泊日"])
df_202003 = pd.read_csv("booking_data_202003.csv", parse_dates=["予約受付日","宿泊日"])

# numpyのインポート
import numpy as np

# 理想のブッキングカーブの作成
x = np.linspace(0,29,30)
tmp_y = np.linspace(0,20,28)
y = np.append(tmp_y, [20,20])

# datetimeのインポート
import datetime as dt

# sklearn.metricsのインポート
from sklearn import metrics

# 予約受付開始日から宿泊日前日までの連続する日付の作成
stay_dates_201903 = pd.date_range(start="2019-03-01", end="2019-03-31" , freq='D')
stay_dates_202003 = pd.date_range(start="2020-03-01", end="2020-03-31" , freq='D')

# MAE格納用の空のリストの作成
mae_201903 = []
mae_202003 = []

# 2019年3月の各宿泊日のブッキングカーブの作成と評価
for stay_date in stay_dates_201903:
    dt_date = pd.Timestamp(stay_date)
    new_index = pd.date_range(start=dt_date - dt.timedelta(days=30), end=dt_date - dt.timedelta(days=1) , freq='D')
    # 累計の予約数の作成
    vcc = df_201903[df_201903["宿泊日"] == dt_date]["予約受付日"].value_counts().reindex(new_index, fill_value=0).sort_index().cumsum().reset_index(drop=True)
    # MAEの計算
    mae = metrics.mean_absolute_error(y, vcc)
    # リストへのMAEの格納
    mae_201903.append(mae)
    
# 2020年3月の各宿泊日のブッキングカーブの作成と評価
for stay_date in stay_dates_202003:
    dt_date = pd.Timestamp(stay_date)
    new_index = pd.date_range(start=dt_date - dt.timedelta(days=30), end=dt_date - dt.timedelta(days=1) , freq='D')
    # 累計の予約数の作成
    vcc = df_202003[df_202003["宿泊日"] == dt_date]["予約受付日"].value_counts().reindex(new_index, fill_value=0).sort_index().cumsum().reset_index(drop=True)
    # MAEの計算
    mae = metrics.mean_absolute_error(y, vcc)
    # リストへのMAEの格納
    mae_202003.append(mae)

# MAEの平均の表示
print(np.mean(mae_201903))
print(np.mean(mae_202003))
